<?php
/**
 * Model class 'Base{CLASS_NAME}' for Nitro
 * --
 * Do not modify this class! It will be overwriten each time NitroGen is executed.
 * To extend and/or change functionality do it on '{CLASS_NAME}' model class.
 * 
 * Generated by Nitro
 */

abstract class Base{CLASS_NAME} extends {EXTENDS}
{
    // Active Record name where this DB entity model belongs
    protected static $_ar_name = '{AR_NAME}';
    protected static $_db;
    protected static $_table;
    protected static $_prefix;
    protected static $_class_;
    protected static $_fields_data;
    protected static $_ai_field;
    protected static $_pk;
    protected static $_map;
	protected static $_trans;
	protected static $_trans_shutdown;
    {METHODS}
	
	{M_GETTER}
    /**
     * Getter for table field `{FIELD}`
	 * 
	 * @return mixed
     */
    public function get{METHOD} ( )
    {
        return $this->get( "{FIELD_NAME}" );
    }
	{/M_GETTER}

	{M_SETTER}
    /**
     * Setter for table field `{FIELD}`
     *
     * @param mixed $data	The data to be set
     * @return $this
     */
    public function set{METHOD} ( $data, $escape=TRUE )
    {
        return $this->set( "{FIELD_NAME}", $data, $escape );
    }
	{/M_SETTER}
	
	{R_INH_GETTER}
    /**
     * Getter for inherited entity '{ENTITY}'
	 * 
	 * @return {ENTITY}
     */
    public function get{METHOD} ( )
    {
        return $this->relation("{REL_NAME}")->getRelated();
    }
	{/R_INH_GETTER}

	{R_INH_SETTER}
    /**
     * Setter for inherited entity '{ENTITY}'
     *
     * @param {ENTITY} $ent	The entity instance to be set
     * @return $this
     */
    public function set{METHOD} ( {ENTITY} $ent )
    {
        $this->relation("{REL_NAME}")->setRelated( $ent );
		return $this;
    }
	{/R_INH_SETTER}

	
	{R_ONE_GETTER}
    /**
     * Getter for entity relationship {REL_TYPE} with '{ENTITY}'
	 * 
	 * @param bool $instance	Return empty related instance if none is assigned
	 * @return {ENTITY}
     */
    public function get{METHOD} ( $instance = FALSE )
    {
        return $this->relation( "{REL_NAME}", $instance );
    }
	{/R_ONE_GETTER}

	{R_ONE_SETTER}
    /**
     * Setter for entity relationship {REL_TYPE} with '{ENTITY}'
     *
     * @param {ENTITY} $ent	The entity instance to be set
     * @return $this
     */
    public function set{METHOD} ( {ENTITY} $ent )
    {
        $this->relation("{REL_NAME}")->setRelated( "{REL_NAME}", $ent );
        return $this;
    }
	{/R_ONE_SETTER}
		
	{R_MANY_GETTER}
    /**
     * Getter for entity relationship {REL_TYPE} with '{ENTITY}' as collection
	 * 
	 * @param array $params	Optionally sets where, order_by, group_by, limit_value and limit_offset to filter collection
	 * @return NitroCollection[{ENTITY}]
     */
    public function get{METHOD} ( $params = array() )
    {
        return $this->relation( "{REL_NAME}", $params );
    }
	{/R_MANY_GETTER}
	
	{R_MANY_SETTER}
    /**
     * Setter for entity relationship {REL_TYPE} with '{ENTITY}' as collection
	 * 
	 * @param NitroCollection $col	The new collection of '{ENTITY}' entities to set
	 * @return $this
     */
    public function set{METHOD} ( NitroCollection $col )
    {
        return $this->relation("{REL_NAME}")->setRelated( "{REL_NAME}", $col );
		return $this;
    }
	{/R_MANY_SETTER}
		
	{R_MANY_CLEANER}
    /**
     * Collection cleaner for entity relationship {REL_TYPE} with '{ENTITY}'
     *
     * @return $this
     */
    public function clear{METHOD} ( )
    {
        $this->relation("{REL_NAME}")->clearRelated("{REL_NAME}");
        return $this;
    }
	{/R_MANY_CLEANER}

	{R_MANY_ADDER}
    /**
     * Collection adder for entity relationship {REL_TYPE} with '{ENTITY}'
     *
     * @param {ENTITY} $ent	The entity instance to be added
     * @return $this
     */
    public function add{METHOD_SINGULAR} ( {ENTITY} $ent )
    {
        $this->relation("{REL_NAME}")->add( "{REL_NAME}", $ent );
        return $this;
    }
	{/R_MANY_ADDER}

	{R_MANY_REMOVER}
    /**
     * Collection remover for entity relationship {REL_TYPE} with '{ENTITY}'
     *
     * @param {ENTITY} $ent	The entity instance to be removed
     * @return $this
     */
    public function remove{METHOD_SINGULAR} ( {ENTITY} $ent )
    {
        $this->relation("{REL_NAME}")->remove( "{REL_NAME}", $ent );
        return $this;
    }
	{/R_MANY_REMOVER}

    {/METHODS}
}